{"version":3,"sources":["App.tsx","UserProfile.tsx","reportWebVitals.ts","index.tsx"],"names":["timeout","DEFAULT_ERROR_MESSAGE","UserProfile","userData","error","className","src","avatar_url","alt","login","name","public_repos","App","useState","userName","setUserName","setUserData","setError","getData","a","CancelToken","axios","source","get","cancelToken","token","then","response","data","toLowerCase","catch","statusText","request","XMLHttpRequest","console","log","isCancel","message","type","placeholder","value","onChange","e","target","trim","onKeyUp","clearTimeout","setTimeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAOIA,E,+FCEEC,G,MAA+B,aAkBtBC,EAhBK,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,MAC5B,OACI,gCACI,qBAAKC,UAAU,gBAAgBC,KAAa,OAARH,QAAQ,IAARA,OAAA,EAAAA,EAAUI,aAN5B,0HAM0DC,IAAI,aAC9EL,GAAYC,GAAS,sCAASA,KAEhCD,IAAaC,GAAS,gCACtB,4CAAsB,OAARD,QAAQ,IAARA,OAAA,EAAAA,EAAUM,QAASR,KACjC,wCAAkB,OAARE,QAAQ,IAARA,OAAA,EAAAA,EAAUO,OAAQT,KAC5B,wDAAkC,OAARE,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,eAAgBV,YDgDjDW,MA5Df,WAAgB,IAAD,EACmBC,mBAAiB,IADpC,mBACNC,EADM,KACIC,EADJ,OAEmBF,qBAFnB,mBAENV,EAFM,KAEIa,EAFJ,OAGaH,mBAAiB,IAH9B,mBAGNT,EAHM,KAGCa,EAHD,KAKPC,EAAO,uCAAG,8BAAAC,EAAA,6DACRC,EAAcC,IAAMD,YAClBE,EAASF,EAAYE,SAFf,SAIND,IAAME,IAXM,gCAWST,EAAU,CAACU,YAAaF,EAAOG,QACzDC,MAAK,SAACC,GACL,GAAGb,IAAaa,EAASC,KAAKnB,MAAMoB,cAAc,CAChD,IAAMD,EAAOD,EAASC,KACtBZ,EAAYY,GACZX,EAAS,QAGZa,OAAM,SAAC1B,GACNY,EAAY,IACTZ,EAAMuB,SACPV,EAASb,EAAMuB,SAASI,YACf3B,EAAM4B,SACff,EAASb,EAAM4B,QAAQC,eAAeF,YACtCG,QAAQC,IAAI/B,IACHiB,IAAMe,SAAShC,GACxBa,EAASb,EAAMiC,SAEfpB,EAAS,oBAtBD,2CAAH,qDAmCb,OACE,sBAAKZ,UAAU,UAAf,UACE,mEACA,uBACEiC,KAAK,OACLC,YAAY,wBACZlC,UAAU,cACVmC,MAAO1B,EACP2B,SAAU,SAACC,GAAD,OAAO3B,EAAY2B,EAAEC,OAAOH,MAAMI,SAC5CC,QAAS,kBAhBbC,aAAa9C,QACbA,EAAU+C,YAAW,WACnBb,QAAQC,IAAI,aACZjB,MACC,SAeD,cAAC,EAAD,CACEf,SAAYA,EACZC,MAASA,QEhDF4C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.51e6aedc.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport UserProfile from './UserProfile';\n\n\nconst BASE_URL:string = \"https://api.github.com/users/\"; \nlet timeout:any;\nfunction App() {\n  const [userName, setUserName] = useState<string>(\"\");\n  const [userData, setUserData] = useState<object>();\n  const [error, setError] = useState<string>(\"\");\n \n  const getData = async () => {\n    const CancelToken = axios.CancelToken;\n      const source = CancelToken.source();\n    \n      await axios.get(BASE_URL + userName, {cancelToken: source.token})\n      .then((response) => {\n        if(userName === response.data.login.toLowerCase()){\n          const data = response.data;\n          setUserData(data);\n          setError(\"\");\n        }\n       })\n      .catch((error) => {\n        setUserData({});\n        if(error.response){\n          setError(error.response.statusText);\n        } else if (error.request){\n          setError(error.request.XMLHttpRequest.statusText)\n          console.log(error);\n        } else if (axios.isCancel(error)) {\n          setError(error.message);\n        } else {\n          setError(\"Unknown Error\");\n        }\n      })  \n  }\n\n  const handleKeyUp = () => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      console.log(\"submitted\");\n      getData();\n    }, 1000);\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <h2>Fetch Github Profile (Typescript)</h2>\n      <input \n        type=\"text\"\n        placeholder=\"Enter github username\"\n        className=\"input-field\"\n        value={userName}\n        onChange={(e) => setUserName(e.target.value.trim())}\n        onKeyUp={() => handleKeyUp()}     \n      />\n\n      <UserProfile \n        userData = {userData}\n        error = {error}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { EnumType } from 'typescript';\n\ninterface userProfileProps {\n    userData: any;\n    error: string;\n}\n\nconst maleDummyImage:string = \"https://st2.depositphotos.com/1502311/12020/v/600/depositphotos_120206862-stock-illustration-profile-picture-vector.jpg\";\nconst DEFAULT_ERROR_MESSAGE:string = \"Not Found\";\n\nconst UserProfile = ({userData, error}:userProfileProps) => {\n    return (\n        <div>\n            <img className=\"profile-image\" src={userData?.avatar_url || maleDummyImage} alt=\"Profile\"/>\n            {!userData && error && <p>User {error}</p>}\n            {\n            userData && !error && <div>\n            <p>Username: {userData?.login || DEFAULT_ERROR_MESSAGE}</p>\n            <p>Name: {userData?.name || DEFAULT_ERROR_MESSAGE}</p>\n            <p>Number of Repository: {userData?.public_repos || DEFAULT_ERROR_MESSAGE}</p>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default UserProfile;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}